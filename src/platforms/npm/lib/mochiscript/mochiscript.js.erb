var fs = require('fs');
var $m = {
  ROOT: root,
  ADAPTER: {
    out: function () { print.call(null, arguments); },
    outs: function () {
      for (var i=0; i<arguments.length; i++) {
        console.log(arguments[i]);
      }
    }
  },
  PLATFORM: 'node'
};
var JS2 = $m;

// connect compiler options
(function () {
  $m.connectCompilerOptions = {
    match: /\.js$/,
    ext:  '.ms',
    compile: function (str, fn) {
      console.warn("Deprecated use of compiler (this is no longer supported by connect).");
      try {
        fn(null, $m.parse(str));
      } catch(err) {
        fn(err);
      }
    }
  };

  $m.setupJade = function(jade) {
    jade.filters.mochi = function (block) {
      var code = $m.parse(block);
      var str =
        '<script language="JavaScript">//<![CDATA[\\n' +
        code.replace(/\n/g, '\\n') +
        '\\n//]]></script>';
      return str;
    };
  };

  $m.registerCompiler = function (compiler) {
    console.warn("Deprecated use of $m.registerCompiler.");
    compiler.compilers['mochiscript'] = $m.connectCompilerOptions;
  };
})();

(function () {
<%= @boot   %>
<%= @parser %>
})();

exports.mochi = $m;
exports.compile = function(text, opts) {
  return $m.parse(text);
};

exports.middleware = function (options) {
  options = options || {};

  var src    = options.src;
  var dest   = options.dest;
  var prefix = options.prefix || '';
  var prefixRegExp = new RegExp('^/' + prefix + '/?');

  if (!src) { throw new Error('mochiscript.middleware() requires "src" directory'); }

  return function (req, res, next) {
    if (req.method == 'GET' && req.url.match(/\.js$/)) {
      var filePath     = req.url.replace(prefixRegExp, '/');
      var msPath       = src + filePath.replace(/js$/, 'ms');
      var jsPath       = dest + filePath;

      fs.readFile(msPath, "utf8", function(err, data) {
        if (err) {
          next();
        } else {
          data = $m.parse(data);
          if (dest) { fs.writeFileSync(jsPath, data); }

          res.header("Content-type", "text/javascript");
          res.send(data);
        }
      });
    } else {
      next();
    }
  }
};

var requireScript = "var $m = require('mochiscript').mochi; $m.PUSH_ROOT(root);";
var endScript = "$m.POP_ROOT();";
if (require.extensions) {
  require.extensions['.ms'] = function(module, filename) {
    return module._compile($m.parse(requireScript + fs.readFileSync(filename, 'utf8') + endScript), filename);
  };
} else if (require.registerExtension) {
  require.registerExtension('.ms', function(content) {
    return $m.parse(requireScript + content);
  });
}
